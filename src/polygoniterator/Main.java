/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package polygoniterator;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;
import polygoniterator.NewClass.ColorPointPair;

/**
 *
 * @author rcher
 */
public class Main extends javax.swing.JFrame implements ActionListener {

    //
    private NewClass nc;
    //
    private JPanel panel;
    private BufferedImage example, test;
    private int minX, maxX, yPixel;
    private Timer timer;
    //

    public Main() {
        initComponents();
        init();
    }

    private void init() {

        //
        panel = new JPanel() {
            @Override
            public void paint(Graphics monet) {
                monet.drawImage(test, 0, 0, this);
            }
        };

        //
        timer = new Timer(67, this);

        //
        final Toolkit kit = Toolkit.getDefaultToolkit();
        final Class closs = getClass();

        // Original.
        example = copyImage(kit.createImage(closs.getResource("example6.png")), this, BufferedImage.TYPE_INT_ARGB);

        // Our working copy.
        test = copyImage(example, this, BufferedImage.TYPE_INT_ARGB);
        nc = new NewClass(this, test);

        //
        jScrollPane1.setViewportView(panel);
    }

    private boolean isTransparent(int testPixel) {
        return ((testPixel >> 24) & 0xFF) <= 4;
    }

    private BufferedImage copyImage(Image image, ImageObserver obs, int type) {

        //
        int imageWidth = image.getWidth(obs);
        int imageHeight = image.getHeight(obs);

        // Try to force it this way
        if (imageWidth <= 0 || imageHeight <= 0) {
            final ImageIcon icon = new ImageIcon(image);
            imageWidth = icon.getIconWidth();
            imageHeight = icon.getIconHeight();
        }

        // Shell for the new BufferedImage
        final BufferedImage bufferedImage = new BufferedImage(imageWidth, imageHeight, type);

        // Create the raster space
        final Graphics2D manet = bufferedImage.createGraphics();

        // Draw the image and then Close it
        manet.drawImage(image, 0, 0, obs);
        manet.dispose();

        //
        return bufferedImage;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {

        //
        if (minX > -1 && maxX > -1) {

            // Grab the next (first) point.
            ColorPointPair p = nc.getNextOpenSpace();

            // While the NewClass isn't in no-man's-land.
            while (nc.hasMore() && p != null) {

                // This will be in the NewClass soon.
                if (!isTransparent(p.rgb())) {
                    
                    // Next Chosen point
                    test.setRGB(p.point().x, p.point().y, (new Color(255, 0, 0, 255).getRGB()));
                    repaint();
                    break;
                }

                // Go after.
                p = nc.getNextOpenSpace();
            }
        }
    }

    public void paintAllThese(ColorPointPair[] pair) {
        for (ColorPointPair p : pair) {
            Point point = p.point();
            test.setRGB(point.x, point.y, (new Color(0, 0, 0, 255)).getRGB());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        acquireJButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        nextJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        acquireJButton.setText("Get Points");
        acquireJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acquireJButtonActionPerformed(evt);
            }
        });
        jPanel1.add(acquireJButton);
        jPanel1.add(filler1);

        nextJButton.setText("Plot");
        nextJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextJButtonActionPerformed(evt);
            }
        });
        jPanel1.add(nextJButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextJButtonActionPerformed
        // TODO add your handling code here:
        if (timer.isRunning()) {
            timer.stop();
        } else {
            timer.start();
        }
    }//GEN-LAST:event_nextJButtonActionPerformed

    private void acquireJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acquireJButtonActionPerformed
        // Null case
        if (test == null) {
            return;
        }

        //
        test = copyImage(example, this, BufferedImage.TYPE_INT_ARGB);
        repaint();

        // Store some values for use
        final int iWidth = test.getWidth(this);
        final int iHeight = test.getHeight(this);

        //
        minX = -1;
        maxX = -1;
        yPixel = 0;

        // Go down y-coord and sweep left for first non-trans pixel then right for first non-trans pixel.
        for (yPixel = 0; yPixel < iHeight - 1; yPixel++) {
            // Now we're going to search for min and max width values
            // Initially in this example we're solely using transparent pixels
            // but we can bit-wise push to account for any user selected color.
            // Go from the left first then stop at first not transparent pixel
            for (int xPixel = 0; xPixel < iWidth; xPixel++) {
                // If the current pixel is not transparent.
                if (!isTransparent(test.getRGB(xPixel, yPixel))) {
                    minX = xPixel;
                    break;
                }
            }

            // Now from the other side
            for (int xPixel = iWidth - 1; xPixel >= 0; xPixel--) {
                // If the current pixel is not transparent.
                if (!isTransparent(test.getRGB(xPixel, yPixel))) {
                    maxX = xPixel;

                    //
                    nc = new NewClass(this, test);
                    nc.setStartPixel(new Point(maxX, yPixel));

                    // Break
                    break;
                }
            }

            if (minX > -1 && maxX > -1) {
                break;
            }
        }
    }//GEN-LAST:event_acquireJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acquireJButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextJButton;
    // End of variables declaration//GEN-END:variables
}
